import numpy as np
import pandas as pd
from sklearn import neural_network


def get_dataset(data):
    data_frame = pd.DataFrame(data)
    X = data_frame.values[:, :-1]
    y = data_frame.values[:, -1].astype('int')
    return (X, y)


data = [[0.074794, 0.743158, 0.949583, 0.030513, 0.691655, 0.851691, 0.056747, 2],
        [0.522141, 0.674053, 0.334365, 0.796836, 0.171568, 0.164267, 0.593331, 1],
        [0.963922, 0.232626, 0.616642, 0.608895, 0.247619, 0.83936, 0.688995, 2],
        [0.825768, 0.104977, 0.847711, 0.747398, 0.808095, 0.035261, 0.128063, 2],
        [0.130926, 0.057926, 0.46031, 0.467953, 0.253114, 0.789342, 0.771926, 1],
        [0.539506, 0.418686, 0.428763, 0.722599, 0.752627, 0.467872, 0.800072, 1],
        [0.633993, 0.527972, 0.028638, 0.556699, 0.597418, 0.488357, 0.905295, 2],
        [0.812149, 0.919069, 0.666738, 0.642999, 0.406218, 0.478102, 0.610209, 2],
        [0.949644, 0.360114, 0.629696, 0.177985, 0.491581, 0.909954, 0.282462, 2],
        [0.975358, 0.844053, 0.923201, 0.396275, 0.941162, 0.946775, 0.01309, 2],
        [0.388884, 0.86592, 0.526417, 0.89918, 0.883931, 0.307533, 0.374053, 2],
        [0.850821, 0.950747, 0.337927, 0.094109, 0.743574, 0.800351, 0.184077, 2],
        [0.320664, 0.982789, 0.959581, 0.552093, 0.021199, 0.591045, 0.977304, 1],
        [0.97107, 0.926796, 0.987331, 0.84811, 0.605793, 0.253675, 0.90374, 2],
        [0.806126, 0.426352, 0.343935, 0.667791, 0.391611, 0.676198, 0.822667, 2],
        [0.710306, 0.218761, 0.806938, 0.147994, 0.13342, 0.528053, 0.144244, 1],
        [0.248909, 0.120666, 0.502616, 0.524785, 0.01609, 0.561025, 0.744649, 1],
        [0.829392, 0.340756, 0.611701, 0.893814, 0.915912, 0.027736, 0.323963, 1],
        [0.154175, 0.812905, 0.07431, 0.426948, 0.67739, 0.35938, 0.085658, 1],
        [0.820931, 0.163002, 0.131608, 0.504414, 0.515286, 0.050566, 0.620436, 1],
        [0.073622, 0.101756, 0.950498, 0.870356, 0.884282, 0.257203, 0.236162, 1],
        [0.601559, 0.415043, 0.120647, 0.152066, 0.090098, 0.920079, 0.276217, 1]]

# m_x, m_y = get_dataset(data)
# print("y", m_y)
# clf = neural_network.MLPClassifier()
# clf.fit(m_x, m_y)
# y_predict = clf.predict(m_x)
# y_prob = clf.predict_proba(m_x)[:, 0]
# print(clf.classes_)
# print("predicted y: ", y_predict)
# print("probablitty y : ", y_prob)


# predictions = [[7, 4, 7, 4, 7],
#                [7, 7, 7, 4, 7],
#                [4, 7, 4, 7, 4],
#                [4, 7, 4, 4, 7],
#                [7, 7, 4, 4, 7],
#                [4, 4, 4, 4, 7],
#                [4, 4, 7, 7, 7]]
# bin_pred = np.apply_along_axis(lambda x: np.bincount(x), axis=1, arr=predictions)
# print("bitcount: \n", bin_pred)
# y_pred = np.apply_along_axis(lambda x: np.argmax(np.bincount(x)), axis=1, arr=predictions)
# print("arg max : \n", y_pred)

# def costam(x, clases):
#     prediction = np.average(x)
#     return clases[0] if prediction > 0.5 else clases[1]
#
# #
# predictions = [[0.2, 0.4, 0.3, 0.2, 0.2],
#                [0.7, 0.7, 0.7, 0.4, 0.7],
#                [0.4, 0.7, 0.4, 0.7, 0.4],
#                [0.4, 0.7, 0.4, 0.4, 0.7],
#                [0.7, 0.7, 0.4, 0.8, 0.7],
#                [0.4, 0.4, 0.4, 0.7, 0.7],
#                [0.4, 0.4, 0.7, 0.3, 0.7]]
# saved_class = [1, 2]
# predictions_one = np.apply_along_axis(lambda x: costam(x, saved_class), axis=1, arr=predictions)
# print(predictions_one)

predictions = [[0.2, 0.4, 0.3, 0.2, 0.2],
               [0.7, 0.7, 0.7, 0.4, 0.7],
               [0.4, 0.7, 0.4, 0.7, 0.4],
               [0.4, 0.7, 0.4, 0.4, 0.7],
               [0.7, 0.7, 0.4, 0.8, 0.7],
               [0.4, 0.4, 0.4, 0.7, 0.7],
               [0.4, 0.4, 0.7, 0.3, 0.7]]

print("nr_of_column = ", np.asarray(predictions).shape[1])
acc = []
# predictions = np.array(predictions)
# print(predictions[:, 0])
for i in range(np.asarray(predictions).shape[1]):
    acc.append(np.average(np.array(predictions)[:, i]))

print(acc)
